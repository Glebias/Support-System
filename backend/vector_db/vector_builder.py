# vector_builder.py
from vectorization.vectorizer import Embedder
from vector_db.vector_db import VectorDB
from typing import List, Dict, Optional
import time


class VectorDatabaseBuilder:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –±–µ–∑ FAISS.
    """

    def __init__(self, model_name: str = "bge-m3"):
        """
        Summary: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã.
        Input:
            model_name (str): –ò–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.
        Output:
            None
        """
        self.embedder = Embedder(model_name)
        self.vector_db = None

    def build_from_texts(
        self, texts: List[str], metadata_list: Optional[List[Dict]] = None
    ) -> VectorDB:
        """
        Summary: –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤.
        Input:
            texts (List[str]): –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
            metadata_list (Optional[List[Dict]]): –°–ø–∏—Å–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤.
        Output:
            VectorDB: –°–æ–∑–¥–∞–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞.
        """
        if metadata_list is None:
            metadata_list = [{} for _ in texts]

        print(f"üöÄ –ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–ª—è {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
        print("üìè –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        dimension = self.embedder.get_embedding_dimension()
        print(f"‚úÖ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {dimension}")

        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
        self.vector_db = VectorDB(dimension)

        # –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        print("üîß –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤...")
        start_time = time.time()

        vectors = self.embedder.encode_batch(texts)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        valid_data = []
        for i, (vector, text, metadata) in enumerate(
            zip(vectors, texts, metadata_list)
        ):
            if vector and any(
                v != 0 for v in vector
            ):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ–∫—Ç–æ—Ä –Ω–µ –Ω—É–ª–µ–≤–æ–π
                valid_data.append((vector, text, metadata))
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–µ–∫—Å—Ç {i}: {text[:50]}...")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        if valid_data:
            vectors_valid, texts_valid, metadata_valid = zip(*valid_data)
            self.vector_db.add_batch(
                list(vectors_valid), list(texts_valid), list(metadata_valid)
            )

        elapsed_time = time.time() - start_time
        print(
            f"‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(valid_data)}/{len(texts)} —Ç–µ–∫—Å—Ç–æ–≤"
        )
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")

        return self.vector_db

    def save_database(self, base_path: str):
        """
        Summary: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É.
        Input:
            base_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
        Output:
            None
        """
        if self.vector_db:
            self.vector_db.save(base_path)
            print(f"üíæ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {base_path}.pkl")
        else:
            raise ValueError("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
